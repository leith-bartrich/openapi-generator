/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "Category.h"
#include "Tag.h"
#include "CoreUObject.h"
#include "Json/Public/Json.h"
#include "Json/Public/Serialization/JsonWriter.h"
#include "OpenAPIModule.h"
#include "Helpers.h"
#include "Pet.generated.h"


/*
* Pet Model related types and methods.
*
* A pet for sale in the pet store
*/

// declare any enum types

/* Enum for values of PetStatusEnum */
UENUM(BlueprintType)
enum class EOAPIPetStatusEnum
{
    Available,    Pending,    Sold,
};

//utility functions for string conversion of PetStatusEnum
static FString EnumToString(const EOAPIPetStatusEnum& EnumValue);
static bool EnumFromString(const FString& EnumAsString, EOAPIPetStatusEnum& EnumValue);



//Blueprint UObject for Pet
UCLASS(BlueprintType)
class OPENAPI_API UOAPIPet : public UOAPIModel
{

    GENERATED_BODY()

public:

    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void WriteJson(JsonWriter& Writer) const override;


    TOptional<int64> Id;

    UFUNCTION(BlueprintCallable)
    const int64 GetId() const { return this->Id.GetValue(); };

    UFUNCTION(BlueprintCallable)
    void SetId(int64 In_Id) { this->Id = In_Id; };

    UFUNCTION(BlueprintCallable)
    bool IdIsSet() const {return this->Id.IsSet();};

    TOptional<Category> Category;

    UFUNCTION(BlueprintCallable)
    const Category GetCategory() const { return this->Category.GetValue(); };

    UFUNCTION(BlueprintCallable)
    void SetCategory(Category In_Category) { this->Category = In_Category; };

    UFUNCTION(BlueprintCallable)
    bool CategoryIsSet() const {return this->Category.IsSet();};

    FString Name;

    UFUNCTION(BlueprintCallable)
    const FString GetName() const { return this->Name; };

    UFUNCTION(BlueprintCallable)
    void SetName(FString In_Name) { this->Name = In_Name; };


    TArray<FString> PhotoUrls;

    UFUNCTION(BlueprintCallable)
    const TArray<FString> GetPhotoUrls() const { return this->PhotoUrls; };

    UFUNCTION(BlueprintCallable)
    void SetPhotoUrls(TArray<FString> In_PhotoUrls) { this->PhotoUrls = In_PhotoUrls; };


    TOptional<TArray<Tag>> Tags;

    UFUNCTION(BlueprintCallable)
    const TArray<Tag> GetTags() const { return this->Tags.GetValue(); };

    UFUNCTION(BlueprintCallable)
    void SetTags(TArray<Tag> In_Tags) { this->Tags = In_Tags; };

    UFUNCTION(BlueprintCallable)
    bool TagsIsSet() const {return this->Tags.IsSet();};
    /* pet status in the store */
    TOptional<EOAPIPetStatusEnum> Status;

    UFUNCTION(BlueprintCallable)
    const EOAPIPetStatusEnum GetStatus() { return this->Status.GetValue(); };

    UFUNCTION(BlueprintCallable)
    void SetStatus(EOAPIPetStatusEnum In_Status) { this->Status = In_Status; };

    UFUNCTION(BlueprintCallable)
    bool StatusIsSet() const {return this->Status.IsSet();};

private:

};



namespace openapi
{

    FString ToString(const UOAPIPet& In_Pet);
    void WriteJsonValue(JsonWriter& Writer, UOAPIPet* Value);

}
