/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "Pet.h"

#include "OpenAPIModule.h"

#include "Templates/SharedPointer.h"




//utility functions for string conversion of EOAPIPetStatusEnum
static FString EOAPIPetStatusEnum::EnumToString(const EOAPIPetStatusEnum& EnumValue)
{
    switch (EnumValue)
    {
        case EOAPIPetStatusEnum::Available:
        return TEXT("available");
        case EOAPIPetStatusEnum::Pending:
        return TEXT("pending");
        case EOAPIPetStatusEnum::Sold:
        return TEXT("sold");
    }
    UE_LOG(LogOpenAPI, Error, TEXT("Invalid EOAPIPet::StatusEnum Value (%d)"), (int)EnumValue);
    return TEXT("");
}

static bool EOAPIPetStatusEnum::EnumFromString(const FString& EnumAsString, EOAPIPetStatusEnum& EnumValue)
{
    static TMap<FString, EOAPIPetStatusEnum> StringToEnum = { 
    { TEXT("available"), EOAPIPetStatusEnum::Available },
    { TEXT("pending"), EOAPIPetStatusEnum::Pending },
    { TEXT("sold"), EOAPIPetStatusEnum::Sold }, };

    const auto Found = StringToEnum.Find(EnumAsString);
    if(Found){
        EnumValue = *Found;
    }
    return Found != nullptr;
}

inline bool FromString(const FString& EnumAsString, EOAPIPetStatusEnum& Value)
{
    return EOAPIPetStatusEnum::EnumFromString(EnumAsString,Value);
}

inline FString ToString(const EOAPIPetStatusEnum& EnumValue)
{
    return EOAPIPetStatusEnum::EnumToString(EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const EOAPIPet::StatusEnum& Value)
{
    return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const EOAPIPet::StatusEnum& Value)
{
    WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, EOAPIPet::StatusEnum& Value)
{
    FString TmpValue;
    if (JsonValue->TryGetString(TmpValue))
    {
        if(FromString(TmpValue, Value))
            return true;
    }
    return false;
}




void UOAPIPet::WriteJson(JsonWriter& Writer) const
{
    Writer->WriteObjectStart();
    if (Id.IsSet())
    {
        Writer->WriteIdentifierPrefix(TEXT("id")); openapi::WriteJsonValue(Writer, Id.GetValue());
    }
    if (Category.IsSet())
    {
        Writer->WriteIdentifierPrefix(TEXT("category")); openapi::WriteJsonValue(Writer, Category.GetValue());
    }
    Writer->WriteIdentifierPrefix(TEXT("name")); openapi::WriteJsonValue(Writer, Name);
    Writer->WriteIdentifierPrefix(TEXT("photoUrls")); openapi::WriteJsonValue(Writer, PhotoUrls);
    if (Tags.IsSet())
    {
        Writer->WriteIdentifierPrefix(TEXT("tags")); openapi::WriteJsonValue(Writer, Tags.GetValue());
    }
    if (Status.IsSet())
    {
        Writer->WriteIdentifierPrefix(TEXT("status")); openapi::WriteJsonValue(Writer, Status.GetValue());
    }
    Writer->WriteObjectEnd();
}

bool UOAPIPet::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    const TSharedPtr<FJsonObject>* Object;
    if (!JsonValue->TryGetObject(Object))
        return false;

    bool ParseSuccess = true;

    ParseSuccess &= openapi::TryGetJsonValue(*Object, TEXT("id"), Id);
    ParseSuccess &= openapi::TryGetJsonValue(*Object, TEXT("category"), Category);
    ParseSuccess &= openapi::TryGetJsonValue(*Object, TEXT("name"), Name);
    ParseSuccess &= openapi::TryGetJsonValue(*Object, TEXT("photoUrls"), PhotoUrls);
    ParseSuccess &= openapi::TryGetJsonValue(*Object, TEXT("tags"), Tags);
    ParseSuccess &= openapi::TryGetJsonValue(*Object, TEXT("status"), Status);

    return ParseSuccess;
}



namespace openapi
{

    FString ToString(const UOAPIPet& In_Pet)
    {
        FString String;
        JsonWriter Writer = TJsonWriterFactory<>::Create(&String);
        In_Pet.WriteJson(Writer);
        Writer->Close();
        return String;
    }

    void WriteJsonValue(JsonWriter& Writer, UOAPIPet* Value){
        Value->WriteJson(Writer);
    }

}
