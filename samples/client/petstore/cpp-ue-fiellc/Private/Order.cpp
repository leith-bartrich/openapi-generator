/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "Order.h"

#include "OpenAPIModule.h"

#include "Templates/SharedPointer.h"




//utility functions for string conversion of EOAPIOrderStatusEnum
static FString EOAPIOrderStatusEnum::EnumToString(const EOAPIOrderStatusEnum& EnumValue)
{
    switch (EnumValue)
    {
        case EOAPIOrderStatusEnum::Placed:
        return TEXT("placed");
        case EOAPIOrderStatusEnum::Approved:
        return TEXT("approved");
        case EOAPIOrderStatusEnum::Delivered:
        return TEXT("delivered");
    }
    UE_LOG(LogOpenAPI, Error, TEXT("Invalid EOAPIOrder::StatusEnum Value (%d)"), (int)EnumValue);
    return TEXT("");
}

static bool EOAPIOrderStatusEnum::EnumFromString(const FString& EnumAsString, EOAPIOrderStatusEnum& EnumValue)
{
    static TMap<FString, EOAPIOrderStatusEnum> StringToEnum = { 
    { TEXT("placed"), EOAPIOrderStatusEnum::Placed },
    { TEXT("approved"), EOAPIOrderStatusEnum::Approved },
    { TEXT("delivered"), EOAPIOrderStatusEnum::Delivered }, };

    const auto Found = StringToEnum.Find(EnumAsString);
    if(Found){
        EnumValue = *Found;
    }
    return Found != nullptr;
}

inline bool FromString(const FString& EnumAsString, EOAPIOrderStatusEnum& Value)
{
    return EOAPIOrderStatusEnum::EnumFromString(EnumAsString,Value);
}

inline FString ToString(const EOAPIOrderStatusEnum& EnumValue)
{
    return EOAPIOrderStatusEnum::EnumToString(EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const EOAPIOrder::StatusEnum& Value)
{
    return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const EOAPIOrder::StatusEnum& Value)
{
    WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, EOAPIOrder::StatusEnum& Value)
{
    FString TmpValue;
    if (JsonValue->TryGetString(TmpValue))
    {
        if(FromString(TmpValue, Value))
            return true;
    }
    return false;
}




void UOAPIOrder::WriteJson(JsonWriter& Writer) const
{
    Writer->WriteObjectStart();
    if (Id.IsSet())
    {
        Writer->WriteIdentifierPrefix(TEXT("id")); openapi::WriteJsonValue(Writer, Id.GetValue());
    }
    if (PetId.IsSet())
    {
        Writer->WriteIdentifierPrefix(TEXT("petId")); openapi::WriteJsonValue(Writer, PetId.GetValue());
    }
    if (Quantity.IsSet())
    {
        Writer->WriteIdentifierPrefix(TEXT("quantity")); openapi::WriteJsonValue(Writer, Quantity.GetValue());
    }
    if (ShipDate.IsSet())
    {
        Writer->WriteIdentifierPrefix(TEXT("shipDate")); openapi::WriteJsonValue(Writer, ShipDate.GetValue());
    }
    if (Status.IsSet())
    {
        Writer->WriteIdentifierPrefix(TEXT("status")); openapi::WriteJsonValue(Writer, Status.GetValue());
    }
    if (Complete.IsSet())
    {
        Writer->WriteIdentifierPrefix(TEXT("complete")); openapi::WriteJsonValue(Writer, Complete.GetValue());
    }
    Writer->WriteObjectEnd();
}

bool UOAPIOrder::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    const TSharedPtr<FJsonObject>* Object;
    if (!JsonValue->TryGetObject(Object))
        return false;

    bool ParseSuccess = true;

    ParseSuccess &= openapi::TryGetJsonValue(*Object, TEXT("id"), Id);
    ParseSuccess &= openapi::TryGetJsonValue(*Object, TEXT("petId"), PetId);
    ParseSuccess &= openapi::TryGetJsonValue(*Object, TEXT("quantity"), Quantity);
    ParseSuccess &= openapi::TryGetJsonValue(*Object, TEXT("shipDate"), ShipDate);
    ParseSuccess &= openapi::TryGetJsonValue(*Object, TEXT("status"), Status);
    ParseSuccess &= openapi::TryGetJsonValue(*Object, TEXT("complete"), Complete);

    return ParseSuccess;
}



namespace openapi
{

    FString ToString(const UOAPIOrder& In_Order)
    {
        FString String;
        JsonWriter Writer = TJsonWriterFactory<>::Create(&String);
        In_Order.WriteJson(Writer);
        Writer->Close();
        return String;
    }

    void WriteJsonValue(JsonWriter& Writer, UOAPIOrder* Value){
        Value->WriteJson(Writer);
    }

}
