/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "ApiResponse.h"

#include "OpenAPIModule.h"

#include "Templates/SharedPointer.h"







void UOAPIApiResponse::WriteJson(JsonWriter& Writer) const
{
    Writer->WriteObjectStart();
    if (Code.IsSet())
    {
        Writer->WriteIdentifierPrefix(TEXT("code")); openapi::WriteJsonValue(Writer, Code.GetValue());
    }
    if (Type.IsSet())
    {
        Writer->WriteIdentifierPrefix(TEXT("type")); openapi::WriteJsonValue(Writer, Type.GetValue());
    }
    if (Message.IsSet())
    {
        Writer->WriteIdentifierPrefix(TEXT("message")); openapi::WriteJsonValue(Writer, Message.GetValue());
    }
    Writer->WriteObjectEnd();
}

bool UOAPIApiResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    const TSharedPtr<FJsonObject>* Object;
    if (!JsonValue->TryGetObject(Object))
        return false;

    bool ParseSuccess = true;

    ParseSuccess &= openapi::TryGetJsonValue(*Object, TEXT("code"), Code);
    ParseSuccess &= openapi::TryGetJsonValue(*Object, TEXT("type"), Type);
    ParseSuccess &= openapi::TryGetJsonValue(*Object, TEXT("message"), Message);

    return ParseSuccess;
}



namespace openapi
{

    FString ToString(const UOAPIApiResponse& In_ApiResponse)
    {
        FString String;
        JsonWriter Writer = TJsonWriterFactory<>::Create(&String);
        In_ApiResponse.WriteJson(Writer);
        Writer->Close();
        return String;
    }

    void WriteJsonValue(JsonWriter& Writer, UOAPIApiResponse* Value){
        Value->WriteJson(Writer);
    }

}
