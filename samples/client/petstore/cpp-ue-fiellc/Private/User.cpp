/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "User.h"

#include "OpenAPIModule.h"

#include "Templates/SharedPointer.h"







void UOAPIUser::WriteJson(JsonWriter& Writer) const
{
    Writer->WriteObjectStart();
    if (Id.IsSet())
    {
        Writer->WriteIdentifierPrefix(TEXT("id")); openapi::WriteJsonValue(Writer, Id.GetValue());
    }
    if (Username.IsSet())
    {
        Writer->WriteIdentifierPrefix(TEXT("username")); openapi::WriteJsonValue(Writer, Username.GetValue());
    }
    if (FirstName.IsSet())
    {
        Writer->WriteIdentifierPrefix(TEXT("firstName")); openapi::WriteJsonValue(Writer, FirstName.GetValue());
    }
    if (LastName.IsSet())
    {
        Writer->WriteIdentifierPrefix(TEXT("lastName")); openapi::WriteJsonValue(Writer, LastName.GetValue());
    }
    if (Email.IsSet())
    {
        Writer->WriteIdentifierPrefix(TEXT("email")); openapi::WriteJsonValue(Writer, Email.GetValue());
    }
    if (Password.IsSet())
    {
        Writer->WriteIdentifierPrefix(TEXT("password")); openapi::WriteJsonValue(Writer, Password.GetValue());
    }
    if (Phone.IsSet())
    {
        Writer->WriteIdentifierPrefix(TEXT("phone")); openapi::WriteJsonValue(Writer, Phone.GetValue());
    }
    if (UserStatus.IsSet())
    {
        Writer->WriteIdentifierPrefix(TEXT("userStatus")); openapi::WriteJsonValue(Writer, UserStatus.GetValue());
    }
    Writer->WriteObjectEnd();
}

bool UOAPIUser::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    const TSharedPtr<FJsonObject>* Object;
    if (!JsonValue->TryGetObject(Object))
        return false;

    bool ParseSuccess = true;

    ParseSuccess &= openapi::TryGetJsonValue(*Object, TEXT("id"), Id);
    ParseSuccess &= openapi::TryGetJsonValue(*Object, TEXT("username"), Username);
    ParseSuccess &= openapi::TryGetJsonValue(*Object, TEXT("firstName"), FirstName);
    ParseSuccess &= openapi::TryGetJsonValue(*Object, TEXT("lastName"), LastName);
    ParseSuccess &= openapi::TryGetJsonValue(*Object, TEXT("email"), Email);
    ParseSuccess &= openapi::TryGetJsonValue(*Object, TEXT("password"), Password);
    ParseSuccess &= openapi::TryGetJsonValue(*Object, TEXT("phone"), Phone);
    ParseSuccess &= openapi::TryGetJsonValue(*Object, TEXT("userStatus"), UserStatus);

    return ParseSuccess;
}



namespace openapi
{

    FString ToString(const UOAPIUser& In_User)
    {
        FString String;
        JsonWriter Writer = TJsonWriterFactory<>::Create(&String);
        In_User.WriteJson(Writer);
        Writer->Close();
        return String;
    }

    void WriteJsonValue(JsonWriter& Writer, UOAPIUser* Value){
        Value->WriteJson(Writer);
    }

}
