{{>licenseInfo}}
#include "{{classname}}.h"

#include "{{unrealModuleName}}Module.h"

#include "Templates/SharedPointer.h"

{{#models}}{{#model}}

{{#hasEnums}}
{{#vars}}{{#isEnum}}
//utility functions for string conversion of E{{unrealModulePrefix}}{{classname}}{{{enumName}}}
static FString EnumToString(const E{{unrealModulePrefix}}{{classname}}{{{enumName}}}& EnumValue)
{
{{#allowableValues}}
    switch (EnumValue)
    {
    {{#enumVars}}
        case E{{unrealModulePrefix}}{{classname}}{{{enumName}}}::{{name}}:
        return TEXT("{{{value}}}");
    {{/enumVars}}
    }
{{/allowableValues}}
    UE_LOG(Log{{unrealModuleName}}, Error, TEXT("Invalid E{{unrealModulePrefix}}{{classname}}::{{{enumName}}} Value (%d)"), (int)EnumValue);
    return TEXT("");
}

static bool EnumFromString(const FString& EnumAsString, E{{unrealModulePrefix}}{{classname}}{{{enumName}}}& EnumValue)
{
    static TMap<FString, E{{unrealModulePrefix}}{{classname}}{{{enumName}}}> StringToEnum = { {{#allowableValues}}{{#enumVars}}
    { TEXT("{{{value}}}"), E{{unrealModulePrefix}}{{classname}}{{{enumName}}}::{{name}} },{{/enumVars}}{{/allowableValues}} };

    const auto Found = StringToEnum.Find(EnumAsString);
    if(Found){
        EnumValue = *Found;
    }
    return Found != nullptr;
}

inline bool FromString(const FString& EnumAsString, E{{unrealModulePrefix}}{{classname}}{{{enumName}}}& Value)
{
    return EnumFromString(EnumAsString,Value);
}

inline FString ToString(const E{{unrealModulePrefix}}{{classname}}{{{enumName}}}& EnumValue)
{
    return EnumToString(EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const E{{unrealModulePrefix}}{{classname}}{{{enumName}}}& Value)
{
    return FStringFormatArg(ToString(Value));
}

inline void {{unrealModulePrefix}}WriteJsonValue(JsonWriter& Writer, const E{{unrealModulePrefix}}{{classname}}{{{enumName}}}& Value)
{
    {{unrealModulePrefix}}WriteJsonValue(Writer, ToString(Value));
}

inline bool {{unrealModulePrefix}}TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, E{{unrealModulePrefix}}{{classname}}{{{enumName}}}& Value)
{
    {{#allowableValues}}
    FString TmpValue;
    if (JsonValue->TryGetString(TmpValue))
    {
        if(FromString(TmpValue, Value))
            return true;
    }
    {{/allowableValues}}
    return false;
}
{{/isEnum}}{{/vars}}{{/hasEnums}}



void U{{unrealModulePrefix}}{{classname}}::WriteJson(JsonWriter& Writer) const
{
    {{#isString}}
    {{unrealModulePrefix}}WriteJsonValue(Writer, Value);
    {{/isString}}
    {{^isString}}
    Writer->WriteObjectStart();
    {{#vars}}
    {{#required}}
    Writer->WriteIdentifierPrefix(TEXT("{{baseName}}")); {{unrealModulePrefix}}WriteJsonValue(Writer, {{name}});
    {{/required}}
    {{^required}}
    if ({{name}}.IsSet())
    {
        Writer->WriteIdentifierPrefix(TEXT("{{baseName}}")); {{unrealModulePrefix}}WriteJsonValue(Writer, {{name}}.GetValue());
    }
    {{/required}}
    {{/vars}}
    Writer->WriteObjectEnd();
    {{/isString}}
}

bool U{{unrealModulePrefix}}{{classname}}::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    {{#isString}}
    return {{unrealModulePrefix}}TryGetJsonValue(JsonValue, Value);
    {{/isString}}
    {{^isString}}
    const TSharedPtr<FJsonObject>* Object;
    if (!JsonValue->TryGetObject(Object))
        return false;

    bool ParseSuccess = true;

    {{#vars}}
    {{#required}}
    {{^isWriteOnly}}ParseSuccess &= {{/isWriteOnly}}{{unrealModulePrefix}}TryGetJsonValue(*Object, TEXT("{{baseName}}"), {{name}});
    {{/required}}
    {{^required}}
    ParseSuccess &= {{unrealModulePrefix}}TryGetJsonValue(*Object, TEXT("{{baseName}}"), {{name}});
    {{/required}}
    {{/vars}}

    this->SetHasChanged(false);

    return ParseSuccess;
    {{/isString}}
}

    FString ToString(const U{{unrealModulePrefix}}{{classname}}& In_{{classname}})
    {
        FString String;
        JsonWriter Writer = TJsonWriterFactory<>::Create(&String);
        In_{{classname}}.WriteJson(Writer);
        Writer->Close();
        return String;
    }

    void {{unrealModulePrefix}}WriteJsonValue(JsonWriter& Writer, U{{unrealModulePrefix}}{{classname}}* Value){
        Value->WriteJson(Writer);
    }

{{/model}}
{{/models}}
