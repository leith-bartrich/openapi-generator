{{>licenseInfo}}
#pragma once

#include "Logging/LogMacros.h"
#include "Serialization/JsonSerializer.h"
#include "Serialization/JsonWriter.h"
#include "Misc/Base64.h"
#include "PlatformHttp.h"
#include "Helpers.generated.h"

//typedefs

typedef TSharedRef<TJsonWriter<>> JsonWriter;

//abstract model UClass
UCLASS(BlueprintType, Abstract)
class {{dllapi}} U{{unrealModulePrefix}}Model : public UObject
{
    GENERATED_BODY()

public:

    virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) PURE_VIRTUAL(UFPLModel::FromJson,return false; );
    virtual void WriteJson(JsonWriter& Writer) const PURE_VIRTUAL(UFPLModel::WriteJson,return; );

};




////{{unrealModulePrefix}}TryGetJsonValue Helpers

inline bool {{unrealModulePrefix}}TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, FString& Value)
{
    FString TmpValue;
    if (JsonValue->TryGetString(TmpValue))
    {
        Value = TmpValue;
        return true;
    }
    else
        return false;
}


inline bool ParseDateTime(const FString& DateTimeString, FDateTime& OutDateTime)
{
    // Iso8601 Format: 	DateTime: YYYY-mm-ddTHH:MM:SS(.sss)(Z|+hh:mm|+hhmm|-hh:mm|-hhmm)
    {
        // We cannot call directly FDateTime::ParseIso8601 because it does not allow for precision beyond the millisecond, but DateTimeString might have more digits
        int32 DotIndex;
        FString StringToParse = DateTimeString;
        if (DateTimeString.FindChar('.', DotIndex))
        {
            int32 TimeZoneIndex;
            if (DateTimeString.FindChar('Z', TimeZoneIndex) || DateTimeString.FindChar('+', TimeZoneIndex) || DateTimeString.FindChar('-', TimeZoneIndex))
            {
                // The string contains a time zone designator starting at TimeZoneIndex
                if (TimeZoneIndex > DotIndex + 4)
                {
                    // Trim to millisecond
                    StringToParse = DateTimeString.Left(DotIndex + 4) + DateTimeString.RightChop(TimeZoneIndex);
                }
            }
            else
            {
                // the string does not contain a time zone designator, trim it to the millisecond
                StringToParse = DateTimeString.Left(DotIndex + 4);
            }
        }

        if (FDateTime::ParseIso8601(*StringToParse, OutDateTime))
            return true;
    }

    if (FDateTime::ParseHttpDate(DateTimeString, OutDateTime))
        return true;

    return FDateTime::Parse(DateTimeString, OutDateTime);
}


inline bool {{unrealModulePrefix}}TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, FDateTime& Value)
{
    FString TmpValue;
    if (JsonValue->TryGetString(TmpValue))
    {
        return ParseDateTime(TmpValue, Value);
    }
    else
        return false;
}

inline bool {{unrealModulePrefix}}TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, FGuid& Value)
{
    FString TmpValue;
    if (JsonValue->TryGetString(TmpValue))
    {
        return FGuid::Parse(TmpValue, Value);
    }
    else
        return false;
}

inline bool {{unrealModulePrefix}}TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, bool& Value)
{
    bool TmpValue;
    if (JsonValue->TryGetBool(TmpValue))
    {
        Value = TmpValue;
        return true;
    }
    else
        return false;
}

inline bool {{unrealModulePrefix}}TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, TSharedPtr<FJsonValue>& JsonObjectValue)
{
    JsonObjectValue = JsonValue;
    return true;
}

inline bool {{unrealModulePrefix}}TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, TSharedPtr<FJsonObject>& JsonObjectValue)
{
    const TSharedPtr<FJsonObject>* Object;
    if (JsonValue->TryGetObject(Object))
    {
        JsonObjectValue = *Object;
        return true;
    }
    return false;
}
/*
inline bool {{unrealModulePrefix}}TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, TArray<uint8>& Value)
{
    FString TmpValue;
    if (JsonValue->TryGetString(TmpValue))
    {
        Base64UrlDecode(TmpValue, Value);
        return true;
    }
    else
        return false;
}
*/
/*
template<typename T, typename std::enable_if<!std::is_base_of<Model, T>::value, int>::type = 0>
inline bool {{unrealModulePrefix}}TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, T& Value)
{
    T TmpValue;
    if (JsonValue->TryGetNumber(TmpValue))
    {
        Value = TmpValue;
        return true;
    }
    else
        return false;
}
*/

template<typename T>
inline bool {{unrealModulePrefix}}TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, TArray<T>& ArrayValue)
{
    const TArray<TSharedPtr<FJsonValue>>* JsonArray;
    if (JsonValue->TryGetArray(JsonArray))
    {
        bool ParseSuccess = true;
        const int32 Count = JsonArray->Num();
        ArrayValue.Reset(Count);
        for (int i = 0; i < Count; i++)
        {
            //sneaky trick to get a default value init'd
            T temp[1] = {};
            T TmpValue = temp[0];
            //T TmpValue;
            ParseSuccess &= {{unrealModulePrefix}}TryGetJsonValue((*JsonArray)[i], TmpValue);
            ArrayValue.Emplace(MoveTemp(TmpValue));
        }
        return ParseSuccess;
    }
    return false;
}

template<typename T>
inline bool {{unrealModulePrefix}}TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, TMap<FString, T>& MapValue)
{
    const TSharedPtr<FJsonObject>* Object;
    if (JsonValue->TryGetObject(Object))
    {
        MapValue.Reset();
        bool ParseSuccess = true;
        for (const auto& It : (*Object)->Values)
        {
            T TmpValue;
            ParseSuccess &= {{unrealModulePrefix}}TryGetJsonValue(It.Value, TmpValue);
            MapValue.Emplace(It.Key, MoveTemp(TmpValue));
        }
        return ParseSuccess;
    }
    return false;
}

template<typename T>
inline bool {{unrealModulePrefix}}TryGetJsonValue(const TSharedPtr<FJsonObject>& JsonObject, const FString& Key, T& Value)
{
    const TSharedPtr<FJsonValue> JsonValue = JsonObject->TryGetField(Key);
    if (JsonValue.IsValid() && !JsonValue->IsNull())
    {
        return {{unrealModulePrefix}}TryGetJsonValue(JsonValue, Value);
    }
    return false;
}

template<typename T>
inline bool {{unrealModulePrefix}}TryGetJsonValue(const TSharedPtr<FJsonObject>& JsonObject, const FString& Key, TOptional<T>& OptionalValue)
{
    if(JsonObject->HasField(Key))
    {
        T Value;
        if ({{unrealModulePrefix}}TryGetJsonValue(JsonObject, Key, Value))
        {
            OptionalValue = Value;
            return true;
        }
        else
            return false;
    }
    return true; // Absence of optional value is not a parsing error
}

////{{unrealModulePrefix}}WriteJsonValue Helpers

inline void {{unrealModulePrefix}}WriteJsonValue(JsonWriter& Writer, const TSharedPtr<FJsonValue>& Value)
{
    if (Value.IsValid())
    {
        FJsonSerializer::Serialize(Value.ToSharedRef(), "", Writer, false);
    }
    else
    {
        Writer->WriteObjectStart();
        Writer->WriteObjectEnd();
    }
}

inline void {{unrealModulePrefix}}WriteJsonValue(JsonWriter& Writer, const TSharedPtr<FJsonObject>& Value)
{
    if (Value.IsValid())
    {
        FJsonSerializer::Serialize(Value.ToSharedRef(), Writer, false);
    }
    else
    {
        Writer->WriteObjectStart();
        Writer->WriteObjectEnd();
    }
}
/*
inline void {{unrealModulePrefix}}WriteJsonValue(JsonWriter& Writer, const TArray<uint8>& Value)
{
    Writer->WriteValue(ToString(Value));
}
*/

inline void FPLWriteJsonValue(JsonWriter& Writer, const bool& Value)
{
    Writer->WriteValue(Value);
}


inline void {{unrealModulePrefix}}WriteJsonValue(JsonWriter& Writer, const FDateTime& Value)
{
    Writer->WriteValue(Value.ToIso8601());
}

inline void {{unrealModulePrefix}}WriteJsonValue(JsonWriter& Writer, const FGuid& Value)
{
    Writer->WriteValue(Value.ToString(EGuidFormats::DigitsWithHyphens));
}

inline void {{unrealModulePrefix}}WriteJsonValue(JsonWriter& Writer, const FString& Value)
{
    Writer->WriteValue(Value);
}

/*
template<typename T, typename std::enable_if<!std::is_base_of<Model, T>::value, int>::type = 0>
inline void {{unrealModulePrefix}}WriteJsonValue(JsonWriter& Writer, const T& Value)
{
    Writer->WriteValue(Value);
}
*/
template<typename T>
inline void {{unrealModulePrefix}}WriteJsonValue(JsonWriter& Writer, const TArray<T>& Value)
{
    Writer->WriteArrayStart();
    for (const auto& Element : Value)
    {
        {{unrealModulePrefix}}WriteJsonValue(Writer, Element);
    }
    Writer->WriteArrayEnd();
}

template<typename T>
inline void {{unrealModulePrefix}}WriteJsonValue(JsonWriter& Writer, const TMap<FString, T>& Value)
{
    Writer->WriteObjectStart();
    for (const auto& It : Value)
    {
        Writer->WriteIdentifierPrefix(It.Key);
        {{unrealModulePrefix}}WriteJsonValue(Writer, It.Value);
    }
    Writer->WriteObjectEnd();
}

//// Base64Url

// Decodes Base64Url encoded strings, see https://en.wikipedia.org/wiki/Base64#Variants_summary_table
template<typename T>
bool Base64UrlDecode(const FString& Base64String, T& Value)
{
    FString TmpCopy(Base64String);
    TmpCopy.ReplaceInline(TEXT("-"), TEXT("+"));
    TmpCopy.ReplaceInline(TEXT("_"), TEXT("/"));

    return FBase64::Decode(TmpCopy, Value);
}

// Encodes strings in Base64Url, see https://en.wikipedia.org/wiki/Base64#Variants_summary_table
template<typename T>
FString Base64UrlEncode(const T& Value)
{
    FString Base64String = FBase64::Encode(Value);
    Base64String.ReplaceInline(TEXT("+"), TEXT("-"));
    Base64String.ReplaceInline(TEXT("/"), TEXT("_"));
    return Base64String;
}

//// ToString
/*
template<typename T, typename std::enable_if<!std::is_base_of<Model, T>::value, int>::type = 0>
inline FString ToString(const T& Value)
{
    return FString::Format(TEXT("{0}"), { ToStringFormatArg(Value) });
}
*/
inline FString ToString(const FString& Value)
{
    return Value;
}

inline FString ToString(bool Value)
{
    return Value ? TEXT("true") : TEXT("false");
}


inline FString ToString(const TArray<uint8>& Value)
{
    return Base64UrlEncode(Value);
}

//// ToStringFormatArg

inline FStringFormatArg ToStringFormatArg(FString& Value)
{
    return FStringFormatArg(Value);
}

inline FStringFormatArg ToStringFormatArg(bool Value)
{
    return FStringFormatArg(ToString(Value));
}

template<typename T>
inline FStringFormatArg ToStringFormatArg(const T& Value)
{
    return FStringFormatArg(Value);
}

inline FStringFormatArg ToStringFormatArg(const FDateTime& Value)
{
    return FStringFormatArg(Value.ToIso8601());
}

inline FStringFormatArg ToStringFormatArg(const FGuid& Value)
{
    return FStringFormatArg(Value.ToString(EGuidFormats::DigitsWithHyphens));
}

inline FStringFormatArg ToStringFormatArg(const TArray<uint8>& Value)
{
    return FStringFormatArg(Base64UrlEncode(Value));
}
//ToUrlString

template<typename T>
inline FString ToUrlString(const T& Value)
{
    return FPlatformHttp::UrlEncode(ToString(Value));
}

template<typename T>
inline FString CollectionToUrlString(const TArray<T>& Collection, const TCHAR* Separator)
{
    FString Output;
    if(Collection.Num() == 0)
        return Output;

    Output += ToUrlString(Collection[0]);
    for(int i = 1; i < Collection.Num(); i++)
    {
        Output += FString::Format(TEXT("{0}{1}"), { Separator, *ToUrlString(Collection[i]) });
    }
    return Output;
}

template<typename T>
inline FString CollectionToUrlString_csv(const TArray<T>& Collection, const TCHAR* BaseName)
{
    return CollectionToUrlString(Collection, TEXT(","));
}

template<typename T>
inline FString CollectionToUrlString_ssv(const TArray<T>& Collection, const TCHAR* BaseName)
{
    return CollectionToUrlString(Collection, TEXT(" "));
}

template<typename T>
inline FString CollectionToUrlString_tsv(const TArray<T>& Collection, const TCHAR* BaseName)
{
    return CollectionToUrlString(Collection, TEXT("\t"));
}

template<typename T>
inline FString CollectionToUrlString_pipes(const TArray<T>& Collection, const TCHAR* BaseName)
{
    return CollectionToUrlString(Collection, TEXT("|"));
}

template<typename T>
inline FString CollectionToUrlString_multi(const TArray<T>& Collection, const TCHAR* BaseName)
{
    FString Output;
    if(Collection.Num() == 0)
        return Output;

    Output += FString::Format(TEXT("{0}={1}"), { FStringFormatArg(BaseName), ToUrlString(Collection[0]) });
    for(int i = 1; i < Collection.Num(); i++)
    {
        Output += FString::Format(TEXT("&{0}={1}"), { FStringFormatArg(BaseName), ToUrlString(Collection[i]) });
    }
    return Output;
}

{{#cppNamespaceDeclarations}}
namespace {{this}}
{
{{/cppNamespaceDeclarations}}


{{#cppNamespaceDeclarations}}
}
{{/cppNamespaceDeclarations}}
