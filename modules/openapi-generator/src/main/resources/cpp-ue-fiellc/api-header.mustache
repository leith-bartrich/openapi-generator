{{>licenseInfo}}
#pragma once

#include "CoreMinimal.h"
#include "CoreUObject.h"
#include "Interfaces/IHttpRequest.h"
#include "Interfaces/IHttpResponse.h"
#include "Serialization/JsonWriter.h"
#include "Serialization/JsonSerializer.h"
#include "Dom/JsonObject.h"
#include "{{unrealModuleName}}Module.h"
#include "Helpers.h"
#include "HttpModule.h"
#include "{{classname}}.generated.h"

//forward delcarations
{{#operations}}{{#operation}}class U{{unrealModulePrefix}}{{operationIdCamelCase}}Request;
{{/operation}}{{/operations}}
{{#operations}}{{#operation}}class U{{unrealModulePrefix}}{{operationIdCamelCase}}Response;
{{/operation}}{{/operations}}
{{#imports}}class U{{unrealModulePrefix}}{{classname}};
{{/imports}}
class U{{unrealModulePrefix}}Request;








//cancellable request handle
UCLASS(BlueprintType, Category={{unrealModulePrefix}}ActiveRequestHandle)
class {{dllapi}} U{{unrealModulePrefix}}ActiveRequestHandle : public UObject
{
    GENERATED_BODY()
public:
    //The request that we can cancel.
    UPROPERTY(BlueprintReadOnly, Category={{unrealModulePrefix}}ActiveRequestHandle)
    U{{unrealModulePrefix}}Request * Request;

    FHttpRequestPtr HttpRequest;

    //Cancel the request.  Will trigger a response with a request failure.
    UFUNCTION(BlueprintCallable, Category={{unrealModulePrefix}}ActiveRequestHandle)
    void DoCancelRequest() { HttpRequest->CancelRequest(); };
};

//http helpers

class {{dllapi}} HttpFileInput
{
public:
	explicit HttpFileInput(const TCHAR* InFilePath);
	explicit HttpFileInput(const FString& InFilePath);

	// This will automatically set the content type if not already set
    void SetFilePath(const TCHAR* InFilePath);
	void SetFilePath(const FString& InFilePath);

    // Optional if it can be deduced from the FilePath
    void SetContentType(const TCHAR* ContentType);

	HttpFileInput& operator=(const HttpFileInput& Other) = default;
	HttpFileInput& operator=(const FString& InFilePath) { SetFilePath(*InFilePath); return*this; }
	HttpFileInput& operator=(const TCHAR* InFilePath) { SetFilePath(InFilePath); return*this; }

	const FString& GetFilePath() const { return FilePath; }
	const FString& GetContentType() const { return ContentType; }

	// Returns the filename with extension
	FString GetFilename() const;

private:
    FString FilePath;
    FString ContentType;
};

class HttpMultipartFormData
{
public:
    void SetBoundary(const TCHAR* InBoundary);
    void SetupHttpRequest(const FHttpRequestRef& HttpRequest);

    void AddStringPart(const TCHAR* Name, const TCHAR* Data);
    void AddJsonPart(const TCHAR* Name, const FString& JsonString);
    void AddBinaryPart(const TCHAR* Name, const TArray<uint8>& ByteArray);
    void AddFilePart(const TCHAR* Name, const HttpFileInput& File);

private:
    void AppendString(const TCHAR* Str);
    const FString& GetBoundary() const;

    mutable FString Boundary;
    TArray<uint8> FormData;

    static const TCHAR* Delimiter;
    static const TCHAR* Newline;
};

/* A REST API interface for {{classname}} */
UCLASS(BlueprintType, Category={{unrealModulePrefix}}{{classname}})
class {{dllapi}} U{{unrealModulePrefix}}{{classname}} : public UObject
{
    GENERATED_BODY()
public:

    UFUNCTION(BlueprintCallable, Category="{{unrealModulePrefix}}|APIs|{{unrealModulePrefix}}{{classname}}")
    static U{{unrealModulePrefix}}{{classname}}* CreateNew{{unrealModulePrefix}}{{classname}}() { return NewObject<U{{unrealModulePrefix}}{{classname}}>(); };

    //Sets the base URL for Endpoints.
    UFUNCTION(BlueprintCallable, Category={{unrealModulePrefix}}{{classname}})
    void SetURL(const FString& Url);

    //Adds global header params to all requests made from this {{classname}} instance.
    UFUNCTION(BlueprintCallable, Category={{unrealModulePrefix}}{{classname}})
    void AddHeaderParam(const FString& Key, const FString& Value);

    UFUNCTION(BlueprintCallable, Category={{unrealModulePrefix}}{{classname}})
    void ClearHeaderParams();

    //Used to create a http request for all operations in this api, unless individual requests are overridden and choose
    //to do otherwise.
    //subclass and override this to create HttpRequests that uses the retry system. e.g. #include "HttpRetrySystem.h" and FManager::CreateRequest()
    virtual FHttpRequestPtr CreateCommonHttpRequest() {return FHttpModule::Get().CreateRequest();};


    /* Operation Requests and Responses */

    {{#operations}}{{#operation}}{{#description}}/* {{{.}}} */{{/description}}
    //dynamic (blueprint accessible) delegate type for the response callback.
    DECLARE_DYNAMIC_DELEGATE_OneParam(FOn{{unrealModulePrefix}}{{operationIdCamelCase}}ResponseDelegate,U{{unrealModulePrefix}}{{operationIdCamelCase}}Response*,In_Response);

    //dynamic (blueprint accessible) method for making a {{operationIdCamelCase}} request.
    UFUNCTION(BlueprintCallable, Category={{unrealModulePrefix}}{{classname}})
    U{{unrealModulePrefix}}ActiveRequestHandle* Do{{operationIdCamelCase}}Request(U{{unrealModulePrefix}}{{operationIdCamelCase}}Request* In_Request, const FOn{{unrealModulePrefix}}{{operationIdCamelCase}}ResponseDelegate& on_response);

    //static (c++) method for making a {{operationIdCamelCase}} request.  The TFunction is easily bound to a lambda.
    U{{unrealModulePrefix}}ActiveRequestHandle* Do{{operationIdCamelCase}}RequestStatic(U{{unrealModulePrefix}}{{operationIdCamelCase}}Request* In_Request, TFunction<void(U{{unrealModulePrefix}}{{operationIdCamelCase}}Response*)> on_response);

    //subclass and override this to create an HttpRequest that uses the retry system. e.g. #include "HttpRetrySystem.h" and FManager::CreateRequest()
    virtual FHttpRequestPtr Create{{operationIdCamelCase}}HttpRequest() {return this->CreateCommonHttpRequest(); };

    {{/operation}}{{/operations}}

private:
    UPROPERTY()
    FString Url;

    UPROPERTY()
    TMap<FString,FString> AdditionalHeaderParams;

    UPROPERTY()
    TArray<U{{unrealModulePrefix}}{{operationIdCamelCase}}Request*> Processing_Requests;

};

UCLASS(BlueprintType, Abstract)
class {{dllapi}} U{{unrealModulePrefix}}{{operationIdCamelCase}}Request : public UObject
{
    GENERATED_BODY()
};


{{#operations}}{{#operation}}
/*
 * Operation {{operationIdCamelCase}}
 */

UCLASS(BlueprintType, Category={{unrealModulePrefix}}{{operationIdCamelCase}}Request)
class {{dllapi}} U{{unrealModulePrefix}}{{operationIdCamelCase}}Request : public U{{unrealModulePrefix}}Request
{

    GENERATED_BODY()

public:

    UFUNCTION(BlueprintCallable, Category ="{{unrealModulePrefix}}|Requests|{{unrealModulePrefix}}{{operationIdCamelCase}}Request")
    static U{{unrealModulePrefix}}{{operationIdCamelCase}}Request* CreateNew{{unrealModulePrefix}}{{operationIdCamelCase}}Request() { return NewObject<U{{unrealModulePrefix}}{{operationIdCamelCase}}Request>(); };

    U{{unrealModulePrefix}}ActiveRequestHandle* DoExecuteStatic(U{{unrealModulePrefix}}{{classname}} * in_api, TFunction<void(U{{unrealModulePrefix}}{{operationIdCamelCase}}Response*)> on_response ) { return in_api->Do{{operationIdCamelCase}}RequestStatic(this, on_response); };

    void SetupHttpRequest(const FHttpRequestRef& In_HttpRequest) const;

    FString ComputePath() const;

    FHttpRequestPtr HttpRequest;

    // A user/application convenience property to attach/tag whatever is useful(a request context), and make it available
    // to the response handler.
    // The Request is available from the Response.  Therefore, so is the Tag.
    // Can be left null.
    UPROPERTY(BlueprintReadWrite,Category="{{unrealModulePrefix}}|Requests|{{unrealModulePrefix}}{{operationIdCamelCase}}Request")
    UObject* Tag;

{{#allParams}}
{{#isEnum}}

{{#allowableValues}}
	enum class {{{enumName}}}
	{
		{{#enumVars}}
		{{name}},
		{{/enumVars}}
  	};
{{/allowableValues}}

    UFUNCTION(Category={{unrealModulePrefix}}{{operationIdCamelCase}}Request)
	static FString EnumToString(const {{{enumName}}}& EnumValue);
    UFUNCTION(Category={{unrealModulePrefix}}{{operationIdCamelCase}}Request)
	static bool EnumFromString(const FString& EnumAsString, {{{enumName}}}& EnumValue);
    {{^required}}TOptional<{{/required}}{{{datatypeWithEnum}}}{{^required}}>{{/required}} {{paramName}}{{#required}}{{#defaultValue}} = {{{.}}}{{/defaultValue}}{{/required}};
    /* Set {{paramName}} Value.{{#description}}  {{{.}}}{{/description}} */
    UFUNCTION(BlueprintCallable, Category={{unrealModulePrefix}}{{operationIdCamelCase}}Request)
    void Set{{paramName}}({{{datatypeWithEnum}}} In_{{paramName}}) { this->{{paramName}} = In_{{paramName}}; };
{{/isEnum}}{{^isEnum}}
{{#isModel}}
    {{^required}}TOptional<{{/required}}U{{unrealModulePrefix}}{{{dataType}}}*{{^required}}>{{/required}} {{paramName}}{{#required}}{{#defaultValue}} = {{{.}}}{{/defaultValue}}{{/required}};
    /* Set {{paramName}} Value.{{#description}}  {{{.}}}{{/description}} */
    UFUNCTION(BlueprintCallable, Category={{unrealModulePrefix}}{{operationIdCamelCase}}Request)
    void Set{{paramName}}(U{{unrealModulePrefix}}{{{dataType}}}* In_{{paramName}}) { this->{{paramName}} = In_{{paramName}}; };
{{/isModel}}{{^isModel}}
    {{^required}}TOptional<{{/required}}{{{dataType}}}{{^required}}>{{/required}} {{paramName}}{{#required}}{{#defaultValue}} = {{{.}}}{{/defaultValue}}{{/required}};
    /* Set {{paramName}} Value.{{#description}}  {{{.}}}{{/description}} */
    UFUNCTION(BlueprintCallable, Category={{unrealModulePrefix}}{{operationIdCamelCase}}Request)
    void Set{{paramName}}({{{dataType}}} In_{{paramName}}) { this->{{paramName}} = In_{{paramName}}; };
{{/isModel}}
{{/isEnum}}
{{/allParams}}
};


UCLASS(BlueprintType, Category={{unrealModulePrefix}}{{operationIdCamelCase}}Response)
class {{dllapi}} U{{unrealModulePrefix}}{{operationIdCamelCase}}Response : public UObject
{

GENERATED_BODY()

public:

    //Whether the Http request failed, as resported by the underlying HTTP platform.
    UPROPERTY(BlueprintReadOnly,Category={{unrealModulePrefix}}{{operationIdCamelCase}}Response)
    bool HttpRequestFailed = false;

    //Whether the connection itself failed before any data was sent down the line.
    UPROPERTY(BlueprintReadOnly,Category={{unrealModulePrefix}}{{operationIdCamelCase}}Response)
    bool HttpConnectionFailed = false;

    //Whether the REST request was succesful as per REST protocol standards.
    UPROPERTY(BlueprintReadOnly,Category={{unrealModulePrefix}}{{operationIdCamelCase}}Response)
    bool RestSuccess = false;

    //The raw HttpResponseCode from the server, or 0, if there was none.
    UPROPERTY(BlueprintReadOnly,Category={{unrealModulePrefix}}{{operationIdCamelCase}}Response)
    int32 HttpResponseCode = 0;

    TOptional<FString> RestResponseDescription;
    //If the REST Response Description has been set by this response.
    UFUNCTION(BlueprintCallable,Category={{unrealModulePrefix}}{{operationIdCamelCase}}Response,BlueprintPure)

    bool RestResponseDescriptionIsSet() { return RestResponseDescription.IsSet(); };
    //The REST Response Description, if it exists, as defined in the API schema.
    UFUNCTION(BlueprintCallable,Category={{unrealModulePrefix}}{{operationIdCamelCase}}Response,BlueprintPure)
    FString& GetRestResponseDescription() { return RestResponseDescription.GetValue(); };

    TOptional<FString> HttpContentType;
    //If there was a HTTP Content Type in the response.
    UFUNCTION(BlueprintCallable,Category={{unrealModulePrefix}}{{operationIdCamelCase}}Response,BlueprintPure)
    bool HttpContentTypeIsSet() { return HttpContentType.IsSet(); };
    //The value of the HTTP Content Type from the response.
    UFUNCTION(BlueprintCallable,Category={{unrealModulePrefix}}{{operationIdCamelCase}}Response,BlueprintPure)
    FString& GetHttpContentType() { return HttpContentType.GetValue(); };

    TOptional<FString> RestResponseContentString;
    //If there was a REST protocol response string set.
    UFUNCTION(BlueprintCallable,Category={{unrealModulePrefix}}{{operationIdCamelCase}}Response,BlueprintPure)
    bool RestResponseContentStringIsSet() { return RestResponseContentString.IsSet(); };
    //The value of the REST protocol response string, if it exists.
    UFUNCTION(BlueprintCallable,Category={{unrealModulePrefix}}{{operationIdCamelCase}}Response,BlueprintPure)
    FString& GetRestResponseContentString() { return RestResponseContentString.GetValue(); };

    //An assesment as to if the Parsing of the REST response was successful.
    //Take this with a grain of salt as it may be too pedantic of a reading of the Schema to
    //be taken seriously.
    UPROPERTY(BlueprintReadOnly,Category={{unrealModulePrefix}}{{operationIdCamelCase}}Response)
    bool RestParseSuccessful = false;

    //The request that resulted in this response.
    UPROPERTY(BlueprintReadOnly,Category={{unrealModulePrefix}}{{operationIdCamelCase}}Response)
    U{{unrealModulePrefix}}{{operationIdCamelCase}}Request* Request;

    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue);

{{#returnType}}{{#responses.0}}
        //The parsed content returned in the response.  If RestParseSuccessful is false, this
        //will still contain a best effort result of parsing the response string.
        UPROPERTY(BlueprintReadOnly,Category={{unrealModulePrefix}}{{operationIdCamelCase}}Response)
    {{#isModel}}
        U{{unrealModulePrefix}}{{dataType}}* Content;
    {{/isModel}}{{^isModel}}
        {{#isArray}}{{#items}}
            {{#isModel}}
        TArray<U{{unrealModulePrefix}}{{dataType}}*> Content;
            {{/isModel}}{{^isModel}}
        {{dataType}} Content;
            {{/isModel}}
        {{/items}}{{/isArray}}{{^isArray}}
        {{dataType}} Content;
        {{/isArray}}
    {{/isModel}}
{{/responses.0}}{{/returnType}}


};



{{/operation}}{{/operations}}