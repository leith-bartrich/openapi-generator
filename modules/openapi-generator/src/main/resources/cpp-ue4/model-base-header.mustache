{{>licenseInfo}}
#pragma once

#include "Interfaces/IHttpRequest.h"
#include "Interfaces/IHttpResponse.h"
#include "Serialization/JsonWriter.h"
#include "Dom/JsonObject.h"
#include "HttpRetrySystem.h"
#include "Containers/Ticker.h"

{{#cppNamespaceDeclarations}}
namespace {{this}}
{
{{/cppNamespaceDeclarations}}

typedef TSharedRef<TJsonWriter<>> JsonWriter;
using namespace FHttpRetrySystem;

struct {{dllapi}} HttpRetryManager : public FManager, public FTickerObjectBase
{
	using FManager::FManager;

	bool Tick(float DeltaTime) final;
};

struct {{dllapi}} HttpRetryParams
{
	HttpRetryParams(
		const FRetryLimitCountSetting& InRetryLimitCountOverride = FRetryLimitCountSetting(),
		const FRetryTimeoutRelativeSecondsSetting& InRetryTimeoutRelativeSecondsOverride = FRetryTimeoutRelativeSecondsSetting(),
		const FRetryResponseCodes& InRetryResponseCodes = FRetryResponseCodes(),
		const FRetryVerbs& InRetryVerbs = FRetryVerbs(),
		const FRetryDomainsPtr& InRetryDomains = FRetryDomainsPtr()
	);

	FRetryLimitCountSetting              RetryLimitCountOverride;
	FRetryTimeoutRelativeSecondsSetting  RetryTimeoutRelativeSecondsOverride;
	FRetryResponseCodes					 RetryResponseCodes;
	FRetryVerbs                          RetryVerbs;
	FRetryDomainsPtr					 RetryDomains;
};

class {{dllapi}} Model
{
public:
	virtual ~Model() {}
	virtual void WriteJson(JsonWriter& Writer) const = 0;
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) = 0;
};

class {{dllapi}} Request
{
public:
	virtual ~Request() {}
	virtual void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const = 0;
	virtual FString ComputePath() const = 0;

	/* Enables retry and optionally sets a retry policy for this request */
	void SetShouldRetry(const HttpRetryParams& Params = HttpRetryParams()) { RetryParams = Params; }
	const TOptional<HttpRetryParams>& GetRetryParams() const { return RetryParams; }

private:
	TOptional<HttpRetryParams> RetryParams;
};

class {{dllapi}} Response
{
public:
	virtual ~Response() {}
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) = 0;


    /* Success or failure of HTTP request as reported by Unreal's HTTP layer.  Canceling the request will also
     * result in failure here.
     */
	bool IsHttpRequestSuccessful() const { return HttpRequestSuccessful; }

    /* Unreal's underlying HTTP request.
     */
    const FHttpRequestPtr& GetHttpRequest() const { return HttpRequest; }

    /* Unreal's underlying HTTP response. This is a TSharedPtr and can be checked for IsValid()
     * IsValid() may return false if there was no HTTP response.
     */
    const FHttpResponsePtr& GetHttpResponse() const { return HttpResponse; }


    /* Whether this was a failure to connect entirely, or alternatively if any data was
     * sent down the line before the connection failed.
     * Applications take note here:  If data was sent down the line, it may not be safe to resend, depending on what your
     * request was asking of the application server.  We don't know if the server processed it or not.
     */
	bool IsHttpClientConnectionError() const;

    /* The HTTP response code from the server, or EHttpResponseCodes::Unknown if there was no HTTP response.
     */
    EHttpResponseCodes::Type GetHttpResponseCode() const;
    virtual void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode);

    /* The REST layer's assessment as to the success of the request.
     */
    bool IsRestRequestSuccessful() const;

    /* The raw (string) content of the REST response.  This is TOptional and may not be set if there was no response,
     * or there was no response content.
     * In case of a parsing problem or unexpected result, this will likely contain whatever the server sent back.
     */
    const FString& GetRestResponseContent() const { return RestResponseContent.Get(""); }
    bool HasRestResponseContent() const { return RestResponseContent.IsSet(); }

    /* The REST layer's description of the response type that was received from the server.  This descriptive text comes
     * from the API Schema upon receiving specified HTTP response codes.
     * Note this is TOptional.  If IsSet() == false, then there likely was no description for the given response code in
     * the Schema.
     */
    const FString& GetRestResponseDescription() const { return RestResponseDescription.Get(""); }
    bool HasRestResponseDescription() const { return RestResponseDescription.IsSet(); }


    /* An assessment from the REST layer as to if the content was fully and properly parsed.
     * Note, this may need to be treated skeptically.  A partially successful parse will still
     * result in data being populated.  And a failure to 'fully' parse may be a pedantic failure from an overly
     * strict reading of the Schema, or a malformed Schema that works well enough.
     */
    const bool IsRestContentFullyParsed() const { return RestContentFullyParsed; }

    [[deprecated("IsSuccessful is now disambiguated to be IsHttpRequestSuccessful and IsRestRequestSuccessful.  Currently returns IsHttpRequestSuccessful.")]]
    bool IsSuccessful() const { return IsHttpRequestSuccessful(); }

    [[deprecated("ResponseString is now disambiguated to GetRestResponseContent and GetRestResponseDescription.  This may not exactly replicate prior behavior.")]]
    const FString& GetResponseString() const;

private:
    //allow direct setting of fields from the building and parsing methods.{{#apiInfo}}{{#apis}}{{#operations}}
    friend class {{classname}};{{/operations}}{{/apis}}{{/apiInfo}}

    //underlying unreal http request
	FHttpRequestPtr HttpRequest;

    //cached value passed by unreal's http request
	bool HttpRequestSuccessful = false;

    //underlying unreal http response, if it exists.
    FHttpResponsePtr HttpResponse;

    //cached content-type value or nothing
    FString RestResponseContentType;

    //cached content string or nothing
    TOptional<FString> RestResponseContent;

    //cached respone description or nothing
    TOptional<FString> RestResponseDescription;

    //best assesment from REST layer as to if the Content was fully and properly parsed
	bool RestContentFullyParsed = false;

};

{{#cppNamespaceDeclarations}}
}
{{/cppNamespaceDeclarations}}
